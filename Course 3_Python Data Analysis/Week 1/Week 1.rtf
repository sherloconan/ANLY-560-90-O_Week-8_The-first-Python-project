{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 STIXGeneral-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red251\green0\blue7;
\red0\green0\blue0;\red242\green242\blue242;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c100000\c0\c0;
\cssrgb\c0\c0\c0;\cssrgb\c96078\c96078\c96078;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs30 \cf0 1. \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Which of the following expressions corresponds to a dictionary with no elements?\
\{\}\
dict()\
\
\
2.Given an existing dictionary\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56975 \u55349 \u56970 \u55349 \u56991 \u55349 \u56984 \u55349 \u56987 \u55349 \u56978 \u55349 \u56989 \u55349 \u56974 \u55349 \u56988 
\f0 \cf2 \up0 \strokec2 , what Python statement adds the key\'a0\
\pard\pardeftab720\sl520
\cf4 \up0 \strokec4 "
\f1 \uc0\u55349 \u56975 \u55349 \u56987 \u55349 \u56990 \u55349 \u56978 \u55349 \u56989 
\f0 "\cf2 \cb1 \strokec2  \cb3 \up0 to this dictionary with the corresponding value\'a0\cf4 \up0 \strokec4 "
\f1 \uc0\u55349 \u56971 \u55349 \u56981 \u55349 \u56970 \u55349 \u56972 \u55349 \u56980 \u55349 \u56971 \u55349 \u56974 \u55349 \u56987 \u55349 \u56987 \u55349 \u56994 
\f0 "\cf2 \up0 \strokec2 ?\

\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56975 \u55349 \u56970 \u55349 \u56991 \u55349 \u56984 \u55349 \u56987 \u55349 \u56978 \u55349 \u56989 \u55349 \u56974 \u55349 \u56988 
\f0 ["
\f1 \uc0\u55349 \u56975 \u55349 \u56987 \u55349 \u56990 \u55349 \u56978 \u55349 \u56989 
\f0 "] = "
\f1 \uc0\u55349 \u56971 \u55349 \u56981 \u55349 \u56970 \u55349 \u56972 \u55349 \u56980 \u55349 \u56971 \u55349 \u56974 \u55349 \u56987 \u55349 \u56987 \u55349 \u56994 
\f0 "\cf2 \cb1 \strokec2 \
\
\
3.\cb3 \up0 Which of the expressions below returns\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56963 \u55349 \u56987 \u55349 \u56990 \u55349 \u56974 
\f0 \cf2 \cb1 \strokec2  \cb3 \up0 when the dictionary\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 \u55349 \u56978 \u55349 \u56984 \u55349 \u56983 \u55349 \u56970 \u55349 \u56987 \u55349 \u56994 
\f0 \cf2 \up0 \strokec2 contains the key\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56980 \u55349 \u56974 \u55349 \u56994 
\f0 \cf2 \cb1 \strokec2  \cb3 \up0 and\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56949 \u55349 \u56970 \u55349 \u56981 \u55349 \u56988 \u55349 \u56974 
\f0 \cf2 \cb1 \strokec2  \cb3 \up0 otherwise?\
\pard\pardeftab720\sl520

\f1 \cf4 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56980 \u55349 \u56974 \u55349 \u56994 
\f0  
\f1 \uc0\u55349 \u56978 \u55349 \u56983 
\f0  
\f1 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 \u55349 \u56978 \u55349 \u56984 \u55349 \u56983 \u55349 \u56970 \u55349 \u56987 \u55349 \u56994 
\f0 \
\
\
\pard\pardeftab720\sl400
\cf5 \cb1 \strokec5 4. Keys\'a0in a dictionary can have which of the following types?\
float, tuple\
\
\
5.\cf2 \cb3 \strokec2 Values\'a0in a dictionary can have which of the following types?\
bool, string, tuple, dict\
\
\
6.Consider the following dictionary:\
instructor_ratings = \{"Joe" : "awesome", "Scott" : "hmmm..."\}\
\pard\pardeftab720\sl320
\cf2 Since\'a0\cf4 \up0 \strokec4 "
\f1 \uc0\u55349 \u56953 \u55349 \u56984 \u55349 \u56977 \u55349 \u56983 
\f0 "\cf2 \cb1 \strokec2  \cb3 \up0 is not a key in the dictionary, Python raises a KeyError exception.\
\
\
7.Write a function\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56972 \u55349 \u56984 \u55349 \u56990 \u55349 \u56983 \u55349 \u56989 
\f0 _
\f1 \uc0\u55349 \u56981 \u55349 \u56974 \u55349 \u56989 \u55349 \u56989 \u55349 \u56974 \u55349 \u56987 \u55349 \u56988 
\f0 (
\f1 \uc0\u55349 \u56992 \u55349 \u56984 \u55349 \u56987 \u55349 \u56973 
\f0 _
\f1 \uc0\u55349 \u56981 \u55349 \u56978 \u55349 \u56988 \u55349 \u56989 
\f0 )\cf2 \up0 \strokec2 \'a0that takes as input a list of words that are composed entirely of lower case letters . This function should return the lower case letter that appears most frequently (total number of occurrences) in the words in\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56992 \u55349 \u56984 \u55349 \u56987 \u55349 \u56973 
\f0 _
\f1 \uc0\u55349 \u56981 \u55349 \u56978 \u55349 \u56988 \u55349 \u56989 
\f0 \cf2 \up0 \strokec2 . (In the case of ties, return the earliest letter in alphabetical order.)\
\pard\pardeftab720\sl400\sa400
\cf2 \
The Python code snippet below represents a start at implementing\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56972 \u55349 \u56984 \u55349 \u56990 \u55349 \u56983 \u55349 \u56989 
\f0 _
\f1 \uc0\u55349 \u56981 \u55349 \u56974 \u55349 \u56989 \u55349 \u56989 \u55349 \u56974 \u55349 \u56987 \u55349 \u56988 
\f0 \cf2 \cb1 \strokec2  \cb3 \up0 using a dictionary\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56981 \u55349 \u56974 \u55349 \u56989 \u55349 \u56989 \u55349 \u56974 \u55349 \u56987 
\f0 _
\f1 \uc0\u55349 \u56972 \u55349 \u56984 \u55349 \u56990 \u55349 \u56983 \u55349 \u56989 
\f0 \cf2 \up0 \strokec2 \'a0whose keys are the lower case letters and whose values are the corresponding number of occurrences of each letter in the strings in\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56992 \u55349 \u56984 \u55349 \u56987 \u55349 \u56973 
\f0 _
\f1 \uc0\u55349 \u56981 \u55349 \u56978 \u55349 \u56988 \u55349 \u56989 
\f0 \cf2 \up0 \strokec2 .\
Complete your implementation of\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56972 \u55349 \u56984 \u55349 \u56990 \u55349 \u56983 \u55349 \u56989 
\f0 _
\f1 \uc0\u55349 \u56981 \u55349 \u56974 \u55349 \u56989 \u55349 \u56989 \u55349 \u56974 \u55349 \u56987 \u55349 \u56988 
\f0 \cf2 \up0 \strokec2 \'a0based on this snippet. As a test,\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56972 \u55349 \u56984 \u55349 \u56990 \u55349 \u56983 \u55349 \u56989 
\f0 _
\f1 \uc0\u55349 \u56981 \u55349 \u56974 \u55349 \u56989 \u55349 \u56989 \u55349 \u56974 \u55349 \u56987 \u55349 \u56988 
\f0 (["
\f1 \uc0\u55349 \u56977 \u55349 \u56974 \u55349 \u56981 \u55349 \u56981 \u55349 \u56984 
\f0 ", "
\f1 \uc0\u55349 \u56992 \u55349 \u56984 \u55349 \u56987 \u55349 \u56981 \u55349 \u56973 
\f0 "])\cf2 \up0 \strokec2 \'a0should return the letter\'a0\cf4 \up0 \strokec4 '
\f1 \uc0\u55349 \u56981 
\f0 '\cf2 \up0 \strokec2 \'a0since\'a0\cf4 \up0 \strokec4 '
\f1 \uc0\u55349 \u56981 
\f0 '\cf2 \up0 \strokec2 \'a0appears 3 times total in the strings\'a0\cf4 \up0 \strokec4 "
\f1 \uc0\u55349 \u56977 \u55349 \u56974 \u55349 \u56981 \u55349 \u56981 \u55349 \u56984 
\f0 "\cf2 \up0 \strokec2 \'a0and\'a0\cf4 \up0 \strokec4 "
\f1 \uc0\u55349 \u56992 \u55349 \u56984 \u55349 \u56987 \u55349 \u56981 \u55349 \u56973 
\f0 "\cf2 \up0 \strokec2 .\
When you are confident in your code, compute the lower case letter return by
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56972 \u55349 \u56984 \u55349 \u56990 \u55349 \u56983 \u55349 \u56989 
\f0 _
\f1 \uc0\u55349 \u56981 \u55349 \u56974 \u55349 \u56989 \u55349 \u56989 \u55349 \u56974 \u55349 \u56987 \u55349 \u56988 
\f0 (
\f1 \uc0\u55349 \u56982 \u55349 \u56984 \u55349 \u56983 \u55349 \u56989 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56992 \u55349 \u56984 \u55349 \u56987 \u55349 \u56973 \u55349 \u56988 
\f0 )\cf2 \up0 \strokec2 \'a0where\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56984 \u55349 \u56983 \u55349 \u56989 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56992 \u55349 \u56984 \u55349 \u56987 \u55349 \u56973 \u55349 \u56988 
\f0 \cf2 \up0 \strokec2 \'a0is defined as shown.\
def count_letters(word_list):\
    """ See question description """\
    \
    ALPHABET = "abcdefghijklmnopqrstuvwxyz"\
\
    letter_count = \{\}\
    for letter in ALPHABET:\
        letter_count[letter] = 0\
        \
    mystring = ""\
    for word in word_list:\
        mystring += word\
    \
    for letter2 in mystring:\
        letter_count[letter2] += 1\
    \
    max = 0\
    lett = ""\
    for ind in ALPHABET:\
        if letter_count[ind] > max:\
            max = letter_count[ind]\
            lett = ind\
            \
    return lett\
\
monty_quote = "listen strange women lying in ponds distributing swords is no basis for a system of government supreme executive power derives from a mandate from the masses not from some farcical aquatic ceremony"\
\
monty_words = monty_quote.split(" ")\
\
#print(monty_words)\
print(count_letters(monty_words))\
\cb6 \
\pard\pardeftab720\sl320
\cf5 \cb1 \strokec5 \
\pard\pardeftab720\sl320
\cf2 \strokec2 \
}