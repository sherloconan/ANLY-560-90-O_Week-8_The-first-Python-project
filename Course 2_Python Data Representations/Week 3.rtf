{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 """\
my_list = [1, 3, 5, 7, 9] \
print(1, my_list)\
my_list.pop() \
print(2, my_list)\
list2=my_list.pop()\
print(0, list2)\
print(3, my_list.pop())\
print(4, my_list)\
"""\
\
"""\
list=[1,3,5,7,9]\
a=list.reverse()\
print(list)\
print(a)\
"""\
\
"""\
fib=[0,1]\
def irr(seq):\
    sum=fib[-2]+fib[-1]\
    newseq=seq.append(sum)\
    return newseq\
for i in range(1,21):\
    irr(fib)\
print(fib[-1])\
"""\
\
def eratosthenes(n):\
    P = [i for i in range(2, n+1)]\
    p = 0\
    while True:\
        if P[p]**2 > P[-1]:\
            break\
        for i in P[p + 1:]:\
            if i % P[p] == 0:\
                P.remove(i)\
        p += 1\
    return P\
\
if __name__ == "__main__":\
    print (len(eratosthenes(2000)))\
    \
"""\
Implement the Sieve of Eratosthenes\
https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\
"""\
\
"""\
def compute_primes(bound):\
    """\
    Return a list of the prime numbers in range(2, bound)\
    """\
    \
    answer = list(range(2, bound))\
    for divisor in range(2, bound):\
        for stride in range(2 * divisor, bound, divisor):\
            if stride in answer:\
                answer.remove(stride)\
    return answer\
\
print(len(compute_primes(200)))\
print(len(compute_primes(2000)))\
"""}