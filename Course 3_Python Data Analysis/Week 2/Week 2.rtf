{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 STIXGeneral-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red251\green0\blue7;
\red53\green118\blue190;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c100000\c0\c0;
\cssrgb\c25882\c54510\c79216;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs30 \cf0 1. \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Given a dictionary\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 
\f0 \cf2 \up0 \strokec2 \'a0and a possible key\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56980 \u55349 \u56974 \u55349 \u56994 
\f0 \cf2 \up0 \strokec2 , which expression below returns the same result as the expression\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56980 \u55349 \u56974 \u55349 \u56994 
\f0  
\f1 \uc0\u55349 \u56978 \u55349 \u56983 
\f0  
\f1 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 
\f0 \cf2 \up0 \strokec2 ?\
\pard\pardeftab720\sl520

\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56980 \u55349 \u56974 \u55349 \u56994 
\f0  
\f1 \uc0\u55349 \u56978 \u55349 \u56983 
\f0  
\f1 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 
\f0 .
\f1 \uc0\u55349 \u56980 \u55349 \u56974 \u55349 \u56994 \u55349 \u56988 
\f0 ()\cf2 \cb1 \strokec2 \
\
\
2. \cb3 \up0 We often want to loop over all the key/value pairs in a dictionary. Assume the variable\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 
\f0 \cf2 \up0 \strokec2 \'a0stores a dictionary. One way of looping like this is as follows:\
for key in my_dict:\
    value = my_dict[key]\
\pard\pardeftab720\sl400\sa400
\cf2 However, there is a better way. We can instead write the following:\
for key, value in ???:\
\pard\pardeftab720\sl520

\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 
\f0 .
\f1 \uc0\u55349 \u56978 \u55349 \u56989 \u55349 \u56974 \u55349 \u56982 \u55349 \u56988 
\f0 ()\cf2 \cb1 \strokec2 \
\
\
3. \cb3 \up0 Consider the following dictionary in Python.\
my_dict = \{0 : 0, 5 : 10, 10 : 20, 15 : 30, 20 : 40\}\
\pard\pardeftab720\sl320
\cf2 What is the difference between the expressions\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 
\f0 [
\f1 \uc0\u55349 \u57336 \u55349 \u57339 
\f0 ]\cf2 \up0 \strokec2 \'a0and\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 
\f0 .
\f1 \uc0\u55349 \u56976 \u55349 \u56974 \u55349 \u56989 
\f0 (
\f1 \uc0\u55349 \u57336 \u55349 \u57339 
\f0 )\cf2 \up0 \strokec2 ?\
The expression\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 
\f0 [
\f1 \uc0\u55349 \u57336 \u55349 \u57339 
\f0 ]\cf2 \up0 \strokec2 \'a0raises a KeyError since\'a0\up0 25\up0 \'a0is not a valid key while the expression\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56973 \u55349 \u56978 \u55349 \u56972 \u55349 \u56989 
\f0 .
\f1 \uc0\u55349 \u56976 \u55349 \u56974 \u55349 \u56989 
\f0 (
\f1 \uc0\u55349 \u57336 \u55349 \u57339 
\f0 )\cf2 \up0 \strokec2 \'a0returns\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56957 \u55349 \u56984 \u55349 \u56983 \u55349 \u56974 
\f0 \cf2 \up0 \strokec2 \'a0in this case.\
\
\
4.Two-dimensional mathematical data structures can be easily represented as a list of lists in Python. A\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Matrix_(mathematics)"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 matrix\'a0}}is a rectangular array of items arranged in vertical rows and horizontal columns. The following snippet of Python code generates and prints a list of lists that models a matrix with three rows and five columns.\
NUM_ROWS = 3\
NUM_COLS = 5\
\
# construct a matrix\
my_matrix = []\
for row in range(NUM_ROWS):\
    new_row = []\
    for col in range(NUM_COLS):\
        new_row.append(row * col)\
    my_matrix.append(new_row)\
 \
# print the matrix\
for row in my_matrix:\
    print(row)\
\pard\pardeftab720\sl400\sa400
\cf2 Mathematically, each entry in a matrix can be indexed by its corresponding row number and column number where these indices start at one.\
\pard\pardeftab720\sl400
\cf2 Which Python expression below returns the value of the entry in the second row and fifth column of the matrix\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 \cf2 \up0 \strokec2 ?\
\pard\pardeftab720\sl520

\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 [
\f1 \uc0\u55349 \u57335 
\f0 ][
\f1 \uc0\u55349 \u57338 
\f0 ]\cf2 \cb1 \strokec2 \
\
\
5. \cb3 \up0 A matrix is\'a0
\i square\'a0
\i0 if it has the same number of rows and columns. The\'a0
\i diagonal\'a0
\i0 of a square matrix consists of those items in the matrix whose row and column indices are equal. Finally, the\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Trace_(linear_algebra)"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 trace\'a0}}of a matrix is the sum of the items on the matrix's diagonal.\
\pard\pardeftab720\sl400\sa400
\cf2 Write a function\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56989 \u55349 \u56987 \u55349 \u56970 \u55349 \u56972 \u55349 \u56974 
\f0 (
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 )\cf2 \up0 \strokec2 \'a0that takes a square matrix\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 \cf2 \up0 \strokec2 \'a0and returns the value of its trace. Then use your implementation of\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56989 \u55349 \u56987 \u55349 \u56970 \u55349 \u56972 \u55349 \u56974 
\f0 ()\cf2 \up0 \strokec2 \'a0and compute the value of 
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56989 \u55349 \u56987 \u55349 \u56970 \u55349 \u56972 \u55349 \u56974 
\f0 (
\f1 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 )\cf2 \up0 \strokec2 \'a0for instances of\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 \cf2 \up0 \strokec2 \'a0as defined by the code snippet provided in the previous question. As test,\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56989 \u55349 \u56987 \u55349 \u56970 \u55349 \u56972 \u55349 \u56974 
\f0 (
\f1 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 )\cf2 \up0 \strokec2 \'a0should return\'a0\up0 30\up0 \'a0when\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56989 \u55349 \u56987 \u55349 \u56970 \u55349 \u56972 \u55349 \u56974 
\f0 (
\f1 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 )\cf2 \up0 \strokec2 \'a0has five rows and columns. Enter in the box below the value returned by\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56989 \u55349 \u56987 \u55349 \u56970 \u55349 \u56972 \u55349 \u56974 
\f0 (
\f1 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 )\cf2 \up0 \strokec2 \'a0when\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56989 \u55349 \u56987 \u55349 \u56970 \u55349 \u56972 \u55349 \u56974 
\f0 (
\f1 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 )\cf2 \up0 \strokec2 \'a0has twenty five rows and columns.\
4900\
NUM_ROWS = 25\
NUM_COLS = 25\
\
# construct a matrix\
my_matrix = []\
for row in range(NUM_ROWS):\
    new_row = []\
    for col in range(NUM_COLS):\
        new_row.append(row * col)\
    my_matrix.append(new_row)\
 \
trace = 0\
for idx in range(0,NUM_ROWS):\
    trace += my_matrix[idx][idx]\
\
print(trace)\
\
\
6. Dictionaries and lists can also be used in combination to create representations for 2D data in Python. As in the case of lists of lists, individual items in the 2D data structure can be referenced via two indices.\
\pard\pardeftab720\sl400
\cf2 Which of the expressions below are\'a0
\b lists of dictionaries
\b0 \'a0(i.e. lists whose items are dictionaries)?\
\pard\pardeftab720\sl320
\cf2 [\{0 : 0, 1 : 0, 2 : 0\}, \{0 : 0, 1 : 1, 2 : 2\}, \{0 : 0, 1 : 2, 2 : 4\}]\
[\{\}, \{\}, \{\}]\
\
\
\
7. Finally, dictionaries of dictionaries can also be used to represent 2D tabular data such as matrices. The following snippet of Python code generates and prints a dictionary of dictionaries that models a matrix with three rows and five columns.\
NUM_ROWS = 3\
NUM_COLS = 5\
\
# construct a matrix\
my_matrix = \{\}\
for row in range(NUM_ROWS):\
    row_dict = \{\}\
    for col in range(NUM_COLS):\
        row_dict[col] = row * col\
    my_matrix[row] = row_dict\
    \
print(my_matrix)\
 \
# print the matrix\
for row in range(NUM_ROWS):\
    for col in range(NUM_COLS):\
        print(my_matrix[row][col], end = " ")\
    print()\
\pard\pardeftab720\sl400\sa400
\cf2 Note that the same expression\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 [
\f1 \uc0\u55349 \u56987 \u55349 \u56984 \u55349 \u56992 
\f0 ][
\f1 \uc0\u55349 \u56972 \u55349 \u56984 \u55349 \u56981 
\f0 ]\cf2 \up0 \strokec2 \'a0can be used to reference an entry in the matrix independent of whether the matrix is represented as a list of lists or a dictionary of dictionaries. Which option below corresponds to the value of\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56982 \u55349 \u56994 
\f0 _
\f1 \uc0\u55349 \u56982 \u55349 \u56970 \u55349 \u56989 \u55349 \u56987 \u55349 \u56978 \u55349 \u56993 
\f0 \cf2 \up0 \strokec2 \'a0as computed by the snippet above when\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56957 \u55349 \u56964 \u55349 \u56956 
\f0 _
\f1 \uc0\u55349 \u56961 \u55349 \u56958 \u55349 \u56966 \u55349 \u56962 
\f0  = 
\f1 \uc0\u55349 \u57339 
\f0 \cf2 \up0 \strokec2 \'a0and\'a0
\f1 \cf4 \up0 \strokec4 \uc0\u55349 \u56957 \u55349 \u56964 \u55349 \u56956 
\f0 _
\f1 \uc0\u55349 \u56946 \u55349 \u56958 \u55349 \u56955 \u55349 \u56962 
\f0  = 
\f1 \uc0\u55349 \u57343 
\f0 \cf2 \up0 \strokec2 ?\
\pard\pardeftab720\sl320
\cf2 \{2: \{6: 12, 2: 4, 0: 0, 7: 14, 5: 10, 3: 6, 8: 16, 4: 8, 1: 2\}, 4: \{0: 0, 3: 12, 2: 8, 6: 24, 4: 16, 5: 20, 8: 32, 7: 28, 1: 4\}, 1: \{2: 2, 5: 5, 3: 3, 8: 8, 4: 4, 1: 1, 7: 7, 0: 0, 6: 6\}, 3: \{4: 12, 0: 0, 8: 24, 6: 18, 7: 21, 3: 9, 5: 15, 1: 3, 2: 6\}, 0: \{8: 0, 1: 0, 6: 0, 2: 0, 4: 0, 5: 0, 3: 0, 0: 0, 7: 0\}\}\
}