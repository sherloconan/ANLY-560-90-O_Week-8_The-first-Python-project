{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 """\
Solution for parts 1-3\
Using substitution ciphers to encrypt and decrypt plain text\
"""\
\
\
# Part 1 - Use a dictionary that represents a substition cipher to \
# encrypt a phrase\
\
# Example of a cipher dictionary 26 lower case letters plus the blank\
CIPHER_DICT = \{'e': 'u', 'b': 's', 'k': 'x', 'u': 'q', 'y': 'c', 'm': 'w', 'o': 'y', 'g': 'f', 'a': 'm', 'x': 'j', 'l': 'n', 's': 'o', 'r': 'g', 'i': 'i', 'j': 'z', 'c': 'k', 'f': 'p', ' ': 'b', 'q': 'r', 'z': 'e', 'p': 'v', 'v': 'l', 'h': 'h', 'd': 'd', 'n': 'a', 't': ' ', 'w': 't'\}\
\
def encrypt(phrase, cipher_dict):\
    """\
    Take a string phrase (lower case plus blank) \
    and encypt it using the dictionary cipher_dict\
    """\
    answer = ""\
    for letter in phrase:\
        answer += cipher_dict[letter]\
    return answer\
\
# Tests\
print("Output for part 1")\
print(encrypt("pig", CIPHER_DICT))\
print(encrypt("hello world", CIPHER_DICT))\
print()\
\
# Output for part 1\
#vif\
#hunnybtygnd\
\
\
\
\
\
\
# Part 2 - Compute an inverse substitution cipher that decrypts\
# an encrypted phrase\
\
def make_decipher_dict(cipher_dict):\
    """\
    Take a cipher dictionary and return the cipher\
    dictionary that undoes the cipher\
    """    \
    decipher_dict = \{\}\
    for letter in cipher_dict:\
        decipher_dict[cipher_dict[letter]] = letter\
    return decipher_dict\
\
DECIPHER_DICT = make_decipher_dict(CIPHER_DICT)\
\
# Tests - note that applying encrypting with the cipher and decipher dicts\
# should return the original results\
print("Output for part 2")\
print(DECIPHER_DICT)\
print(encrypt(encrypt("pig", CIPHER_DICT), DECIPHER_DICT))\
print(encrypt(encrypt("hello world", CIPHER_DICT), DECIPHER_DICT))\
print()\
\
# Output for part 2 - note order of items in dictionary is not important\
#\{'p': 'f', 'n': 'l', 'm': 'a', 'i': 'i', 'd': 'd', 'x': 'k', 'b': ' ', 'l': 'v', 'f': 'g', 'o': 's', 'u': 'e', 'a': 'n', 'c': 'y', 'r': 'q', 'e': 'z', 'k': 'c', 'w': 'm', 'g': 'r', 'y': 'o', ' ': 't', 'h': 'h', 'v': 'p', 'j': 'x', 'q': 'u', 't': 'w', 's': 'b', 'z': 'j'\}\
#pig\
#hello world\
\
\
\
\
\
# Part 3 - Create a random cipher dictionary\
\
import random\
\
def make_cipher_dict(alphabet):\
    """\
    Given a string of unique characters, compute a random \
    cipher dictionary for these characters\
    """\
    letters= list(alphabet)\
    shuffled_letters = list(alphabet)\
    random.shuffle(shuffled_letters)\
    \
    cipher_dict = \{\}\
    for idx in range(len(alphabet)):\
        letter = letters[idx]\
        shuffled_letter = shuffled_letters[idx]\
        cipher_dict[letter] = shuffled_letter\
    return cipher_dict\
\
# Tests\
print("Output for part 3")\
print(make_cipher_dict(""))\
print(make_cipher_dict("cat"))\
print(make_cipher_dict("abcdefghijklmnopqrstuvwxyz "))\
\
# Output for part 3 -  note that answers are randomized\
#\{\}\
#\{'a': 'a', 't': 'c', 'c': 't'\}\
#\{'a': 'h', 'l': 'u', 'u': 'q', 'b': 'v', 'y': 'a', 'm': 'r', 'p': 'j', 'k': 'e', 'n': 'p', 't': 'x', 'd': 'o', 'c': 'c', 'w': ' ', 'f': 'd', 'r': 'z', 'v': 'l', 's': 'y', 'e': 'b', 'o': 'i', 'x': 'm', 'h': 's', 'i': 'w', 'q': 'g', 'g': 'n', 'j': 'f', 'z': 'k', ' ': 't'\}\
}